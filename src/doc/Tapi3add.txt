
This is a quick overview over termHack, sendLineDeviceSpecific, setupTransfer, transfer, 
setupConference and conference.





termHack:
---------
termHack enables Tapi3 to do a conference or a transfer between different addresses on the same
terminal. It's off by default. To enable it add 'tapi3.termHack = true' to your Tapi3.props or
use 'Tapi3; tapi3.termHack=true' as providername.
When enabled the provider checks the addressnames for similarity and in case it's similar enough
it's sayed to be the same terminal.


sendLineDeviceSpecific:
-----------------------
this is for extra features the telephone systems offers. I for one use it for acd-registration.
All you have to do is to sendPrivateData(object) with the object beeing a byte array. 
SendPrivateData is usually called on a call-object so if you want to use this without a call you
have to call rawProvider.sendPrivateData(..). And another thing you have to be cautious is the
endianness. Java is big endian so if you want to send the byte array '01 02 03 04' to your tsps 
sendLineDeviceSpecific function you have to put '04 03 02 01' in the java byte array.


setupTransfer, transfer, setupConference, conference:
-----------------------------------------------------
A lot of tsps require transfer (and conference, too) to work properly to use setupTransfer 
(setupConference accordingly) for the consultation call. GJTapi has another idea how to
transfer and conference works. That's why this party is 'hacky' again.
For this function to be called you have to have another call first. Then call sendPrivateData()
to it, passing in a PrivateTransferConferenceInfo object.

	// Set up consultation call for transfer
	CallControlCall consult = (CallControlCall)prov.createCall();
	PrivateData consultPrivate = (PrivateData)consult;
	PrivateTransferConferenceInfo ccInfo = PrivateTransferConferenceInfo.createTransferInfo((Tapi3CallID)((FreeCall)ccc).getCallID(), addr.getName(), ts[0].getName());
	consultPrivate.sendPrivateData(ccInfo);
	consult.connect(terminal, addr, finalDest);
	
	// transfer the call
	ccc.setTransferController(termConn);
	ccc.transfer(consult);

For conference, you change the factory method to "PrivateTransferConferenceInfo.createConferenceInfo()"
and then call "ccc.conference(consult);"

If a transfer or conference fails, you can clear it using:

	ccInfo.setPrimaryCallId(null);
	consultPrivate.sendPrivateData(ccInfo);

If, after settting up a consultation call, you want to change between transfer and conference:

	ccInfo.setTransferFlag(true);

This method scales to multiple calls at one time and simplifies the calling structure, since you only have to
make one call into "sendPrivateData()" against the consultation call (or primary call) before following
normal JTAPI usage.


