<project name="GJTAPI" default="allStagings" basedir=".">
    <description>
        Ant build file for the GJTAPI project
    </description>
  <!-- set global properties for this build -->
  <property name="src" location="src"/>
  <property name="media1.3Overridesrc" location="media1.3Override"/>
  <property name="xtapi-src" location="xtapiSpSrc"/>
  <property name="build" location="build"/>
  <property name="xtapi-build" location="xtapi-build"/>
  <property name="dist"  location="dist"/>
  <property name="staging" location="${dist}/staging"/>
  <property name="njiax-src" location="njiax"/>
	
	<!-- packages to put in their own distribution -->
	<property name="ModemPackage" value="**/raw/modem/**"/>
	<property name="SipPackage" value="**/raw/sipprovider/**"/>
	<property name="Tapi3Package" value="**/raw/tapi3/**"/>
	<property name="Tapi3TestPackage" value="**/test/tapi3/**"/>
	<property name="XtapiPackage" value="**/raw/sxtapi/**"/>
	<property name="AsteriskPackage" value="**/raw/asterisk/**"/>
	<property name="DialogicPackage" value="**/raw/dialogic/**"/>
	<property name="RemotePackage" value="**/raw/remote/**"/>
	<property name="JavasoundPackage" value="**/raw/javasound/**"/>
	<property name="MjSipPackage" value="**/raw/mjsip/**"/>
	<property name="NjIaxPackage" value="**/raw/njiax/**"/>
	
	
	<!-- version -->
	<property name="baseVersion" value="1.9"/>
	<property name="releaseCandidate" value="-rc4"/>
	<property name="version" value="${baseVersion}${releaseCandidate}"/>
	<!-- licence file -->
	<property name="licenceFile" value="license.txt"/>
	<property name="releaseNotes" value="GJTAPI_${baseVersion}_Release_Notes.html"/>
	
	<property name="compile.debug" value="true" />

  <!-- Edit this with your jtapi and jcc jar locations... -->
  <path id="classpath">	
    <fileset dir="redistrib">
      <include name="jcc-1.1.jar"/>
      <include name="jtapi-1.3.1.jar"/>
      <include name="jcat-0.3.1.jar"/>
      <include name="JainSipApi1.1.jar"/>
      <include name="Stun4J.jar"/>
      <include name="log4j-1.2.16.jar"/>
      <include name="nist-sdp-1.0.jar"/>
      <include name="nist-sip-1.2.jar"/>
      <include name="asterisk-java-0.2-rc1.jar"/>
 <!-- Generic version. May want to replace with a platform-specific version -->
        <include name="comm-2.0.3.jar"/>
 <!-- These are platform dependent. Do not redistribute -->   	
        <include name="jmf.jar"/>
 <!-- XTAPI support -->
    	<include name="xtapi.jar"/>
    	<include name="mstapisp.jar"/>
<!-- MjSip support Get it from: http://www.mjsip.org -->
    	<include name="sip.jar"/>
    	<include name="ua.jar"/>
<!-- njIAX support Get it from: http://code.google.com/p/njiax/ -->
		<include name="njiax.jar"/>
    </fileset>
  </path>

	<property name="jaxws.lib" location="${java.home}/../../jaxws-ri"/>
	
	<path id="jaxws.classpath">
		<fileset dir="${jaxws.lib}">
			<include name="**/*.jar"/>
		</fileset>
		<pathelement location="${java.home}/../lib/tools.jar"/>			
	</path>
	
  <taskdef name="apt" classname="com.sun.tools.ws.ant.Apt" classpathref="jaxws.classpath">
  </taskdef>

  <taskdef name="wsgen" classname="com.sun.tools.ws.ant.WsGen" classpathref="jaxws.classpath">
  </taskdef>

  <taskdef name="wsimport" classname="com.sun.tools.ws.ant.WsImport" classpathref="jaxws.classpath">
  </taskdef>
	
	
  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
  	<mkdir dir="${dist}"/>
  	<mkdir dir="${staging}"/>
    <mkdir dir="${xtapi-build}"/>
  </target>

  <target name="compile" depends="init, njiaxCompile"
        description="compile the source " >
    <!-- Compile the java code from ${src} into ${build} -->
    <javac encoding="ISO-8859-1" destdir="${build}" source="1.5" debug="${compile.debug}">
		<src path="${src}"/>
		<src path="${media1.3Overridesrc}"/>
			<classpath refid="classpath"/>
    </javac>

  </target>

  <target name="xtapiCompile" depends="init, compile"
        description="compile the xtapi source" >
    <!-- Compile the java code from ${xtapi-src} into ${xtapi-build} -->
    <javac srcdir="${xtapi-src}" destdir="${xtapi-build}">
    	<compilerarg value="-Xlint:deprecation"/>
    	<compilerarg value="-Xlint:unchecked"/>    	
			<classpath refid="classpath"/>
			<classpath>
				<pathelement path="../../xtapi/bin"/>
			</classpath>
			<classpath>
				<pathelement path="${build}"/>
			</classpath>
    </javac>
  </target>
  
	<target name="njiaxCompile" depends="init"
        description="compile the njiax extensions source" >
    <!-- Compile the java code from ${njiax-src} into ${build} -->
    <javac srcdir="${njiax-src}" destdir="${build}">
    	<classpath refid="classpath"/>
    </javac>
  </target>
  
  <target name="Staging" depends="compile"
        description="generate the distribution" >
    <!-- Create the distribution directory -->
    <mkdir dir="${staging}"/>

    <!-- copy the property files over -->
    <copy todir="${build}">
         <fileset dir="${src}">
            <exclude name="**/*.java"/>
            <exclude name="tmpDocs"/>
            <exclude name="**/*.html"/>
         </fileset>
    	<fileset dir="${src}">
     		<include name="${releaseNotes}"/>
    	</fileset>

    </copy>

  	<!-- now copy to the staging directory -->
	<copy toDir="${staging}">
		<fileset dir="${build}">
	        <include name="${licenceFile}"/>
	        <include name="*.props"/>
	        <include name="*.gjtapi"/>
			<include name="*.idl"/>
			<include name="ua1" />
			<include name="ua2" />
			<include name="listProviders.*"/>
			<include name="${releaseNotes}"/>
		</fileset>
	</copy>

    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
    <jar jarfile="${staging}/gjtapi-${version}.jar">
  		<fileset dir="${build}">
  			<exclude name="${ModemPackage}"/>
  			<exclude name="${AsteriskPackage}"/>
  			<exclude name="${RemotePackage}"/>
  			<exclude name="${SipPackage}"/>
  			<exclude name="${Tapi3Package}"/>
  			<exclude name="${Tapi3TestPackage}"/>
  			<exclude name="${XtapiPackage}"/>
  			<exclude name="${DialogicPackage}"/>
  			<exclude name="**/raw/sip/**"/>
  			<exclude name="${JavasoundPackage}"/>
  			<exclude name="${MjSipPackage}"/>
  			<exclude name="${NjIaxPackage}"/>
  			<exclude name="iax/**"/>
  			<exclude name="org/**"/>
  			<exclude name="classes/**"/>
			<exclude name="javax/**"/>
  			<exclude name="Asterisk.gjtapi"/>
  			<exclude name="Corba.gjtapi"/>
  			<exclude name="CorbaProvider.idl"/>
  			<exclude name="DialogicGC.gjtapi"/>
  			<exclude name="listProviders.*"/>
  			<exclude name="Modem.gjtapi"/>
  			<exclude name="provider.gjtapi"/>
  			<exclude name="Rmi.gjtapi"/>
  			<exclude name="Sip.gjtapi"/>
  			<exclude name="Tapi3.gjtapi"/>
  			<exclude name="Xtapi.gjtapi"/>
  			<exclude name="JavaSound.gjtapi"/>
  			<exclude name="MjSip.gjtapi"/>
  			<exclude name="NjIax.gjtapi"/>
  			<exclude name="ua1"/>
  			<exclude name="ua2"/>
		</fileset>
    </jar>

  	<jar jarfile="${staging}/media1.3override.jar">
		<fileset dir="${build}">
			<include name="javax/telephony/**"/>
		</fileset>
	</jar>

  	<!-- Simple test jar for a provider specified in a jar file -->
  	<jar jarfile="${staging}/gjtapi-testProvider-${version}.jar">
  		<fileset dir="${src}">
  			<include name="provider.gjtapi"/>
  		</fileset>
  	</jar>
  </target>

	<target name="ModemStaging" depends="Staging"
	        description="generate the distribution" >

		<!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-modem-${version}.jar" basedir="${build}"
	  		includes="${ModemPackage} ${licenceFile} ${releaseNotes}"/>
	</target>

	<target name="RemoteStaging" depends="Staging"
	        description="generate the distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-remote-${version}.jar" basedir="${build}"
	  		includes="${RemotePackage} ${licenceFile} ${releaseNotes}"/>
	</target>
	
	<target name="SipStaging" depends="Staging"
	        description="generate the distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-sip-${version}.jar" basedir="${build}"
	  		includes="${SipPackage} ${licenceFile} ${releaseNotes}"/>
	</target>
	
	<target name="Tapi3Staging" depends="Staging"
	        description="generate the distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-tapi3-${version}.jar" basedir="${build}"
	  		includes="${Tapi3Package} ${Tapi3TestPackage} ${licenceFile} ${releaseNotes}"/>
	</target>
	
	<target name="AsteriskStaging" depends="Staging"
	        description="generate the distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-asterisk-${version}.jar" basedir="${build}"
	  		includes="${AsteriskPackage} ${licenceFile} ${releaseNotes}"/>
	</target>
	
	<target name="DialogicStaging" depends="Staging"
	        description="generate the distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-dialogic-${version}.jar" basedir="${build}"
	  		includes="${DialogicPackage} ${licenceFile} ${releaseNotes}"/>
	</target>
	
	<target name="JavasoundStaging" depends="Staging"
	        description="generate the javasound distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-javasound-${version}.jar" basedir="${build}"
	  		includes="${JavasoundPackage} net/sourceforge/gjtapi/util/SizedPipedInputStream.class ${licenceFile} ${releaseNotes}"/>
	</target>

	<target name="MjSipStaging" depends="Staging"
	        description="generate the MjSip distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-mjsip-${version}.jar" basedir="${build}"
	  		includes="${MjSipPackage} ${licenceFile} ${releaseNotes}"/>
	</target>

	<target name="NjIaxStaging" depends="Staging"
	        description="generate the NjIax distribution" >

	    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
	    <jar jarfile="${staging}/gjtapi-njiax-${version}.jar" basedir="${build}"
	  		includes="${NjIaxPackage} ${licenceFile} ${releaseNotes} org/bouncycastle/** iax/** "/>
	</target>

	<target name="xtapi-Staging" depends="xtapiCompile, Staging"
        description="generate the distribution" >

  	<!-- copy the property files over -->
    <copy todir="${xtapi-build}">
         <fileset dir="${xtapi-src}">
            <exclude name="**/*.java"/>
         </fileset>
    </copy>

    <!-- Put everything in ${build} into the gjtapi-${version}.jar file -->
    <jar jarfile="${staging}/gjtapi-xtapiSp-${version}.jar" basedir="${xtapi-build}"/>
  </target>

  	<target name="allStagings" depends="Staging,RemoteStaging,ModemStaging,SipStaging,Tapi3Staging,AsteriskStaging,DialogicStaging,xtapi-Staging,NjIaxStaging,MjSipStaging,JavasoundStaging">
	</target>

	<target name="coreDist" depends="Staging">
		<!-- Package up the core jar file, property files, readme and licence into the gjtapi-core-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-core-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-${version}.jar"/>
				<include name="gjtapi-testProvider-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="GenericResources.props"/>
				<include name="GenericCapabilities.props"/>
				<include name="Emulator.props"/>
				<include name="Emulator6.props"/>
				<include name="Inverter.props"/>
				<include name="log4j.props"/>
				<include name="Mux.props"/>
				<include name="listProviders.*"/>
			</fileset>
		    <fileset dir="." >
		      <include name="redistrib/jcc-1.1.jar"/>
		      <include name="redistrib/jtapi-1.3.1.jar"/>
		      <include name="redistrib/jcat-0.3.1.jar"/>
			  <include name="redistrib/jtapi-1.3.1-mediaImpl.jar"/>
		      <include name="redistrib/log4j-1.2.8.jar"/>
			</fileset>
		</zip>
	</target>
	
	<target name="remoteDist" depends="RemoteStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-remote-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-remote-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-remote-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="CorbaProvider.idl"/>
				<include name="Corba.gjtapi"/>
				<include name="Rmi.gjtapi"/>
			</fileset>
		</zip>
	</target>

	<target name="modemDist" depends="ModemStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-modem-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-modem-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-modem-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="Modem.gjtapi"/>
				<include name="**/raw/modem/README"/>
				<include name="**/raw/modem/properties/*"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/comm-2.0.3.jar"/>
			</fileset>
		</zip>
	</target>

	<target name="sipDist" depends="SipStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-sip-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-sip-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-sip-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="Sip.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/JainSipApi1.1.jar"/>
		      <include name="redistrib/Stun4J.jar"/>
		      <include name="redistrib/nist-sdp-1.0.jar"/>
		      <include name="redistrib/nist-sip-1.2.jar"/>
			</fileset>
		</zip>
	</target>

	<target name="tapi3Dist" depends="Tapi3Staging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-tapi3-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-tapi3-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-tapi3-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="Tapi3.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="lib/Tapi3Provider.dll"/>
			</fileset>
		</zip>
	</target>

	<target name="asteriskDist" depends="AsteriskStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-asterisk-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-asterisk-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-asterisk-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="Asterisk.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/asterisk-java-0.2-rc1.jar"/>
			</fileset>
		</zip>
	</target>

	<target name="dialogicDist" depends="DialogicStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-dialogic-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-dialogic-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-dialogic-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="DialogicGC.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="lib/gcprovider.dll"/>
			  <include name="lib/libgcprovider.so"/>
			</fileset>
		</zip>
	</target>

	<target name="JavasoundDist" depends="JavasoundStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-javasound-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-javasound-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-javasound-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="JavaSound.gjtapi"/>
			</fileset>
		</zip>
	</target>

	<target name="MjSipDist" depends="MjSipStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-mjsip-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-mjsip-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-mjsip-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="MjSip.gjtapi"/>
				<include name="ua1"/>
				<include name="ua2"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/sip.jar"/>
			  <include name="redistrib/ua.jar"/>
			</fileset>
		</zip>
	</target>

	<target name="NjIaxDist" depends="NjIaxStaging, NjiaxBranchJar">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-njiax-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-njiax-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-njiax-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="NjIax.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/njiax-gjtapi-${version}.jar"/>
			</fileset>
		</zip>
	</target>
	
	<target name="NjiaxBranchJar" depends="njiaxCompile">
		<jar jarfile="redistrib/njiax-gjtapi-${version}.jar" basedir="${build}"
	  		includes="iax/**"/>
	</target>

	<target name="xtapiDist" depends="Staging, xtapi-Staging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-xtapi-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-xtapi-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-xtapiSp-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="Xtapi.gjtapi"/>
			</fileset>
			<fileset dir="." >
		      <include name="redistrib/xtapi.jar"/>
			  <include name="redistrib/mstapisp.jar"/>
			</fileset>
		</zip>
	</target>
	
	<target name="webServiceDist" depends="Staging, RemoteStaging">
		<!-- call webservice provider build file -->
		<ant dir="webServiceBridge" target="build" inheritAll="False"/>
		
		<copy file="webServiceBridge/Gjtapi-Ws.war" tofile="${staging}/gjtapi-WsServer-${version}.war"/>
		<copy file="webServiceBridge/Gjtapi-Ws-client.jar" tofile="${staging}/gjtapi-WsClient-${version}.jar"/>
		<zip destfile="${dist}/gjtapi-webService-${version}.zip">
			<fileset dir="${staging}">
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="gjtapi-WsServer-${version}.war"/>
				<include name="gjtapi-WsClient-${version}.jar"/>				
			</fileset>
			<fileset dir="webServiceBridge/docs">
				<include name="GjtapiWebServiceDocumentation.pdf"/>
			</fileset>
		</zip>
  	</target>

	<target name="jaxWsServerCompile" depends="init, compile"
        description="compile the JaxWs Bridge server source" >
    <!-- Compile the java code from ${webService} into ${build} -->
		<mkdir dir="${build}-preServer"/>
	    <javac srcdir="webServiceBridge/src" destdir="${build}-preServer" debug="${compile.debug}">
	    	<classpath refid="classpath"/>
			<classpath>
				<pathelement path="${build}"/>
			</classpath>
	    </javac>
    </target>

	<target name="jaxWsGen" depends="jaxWsServerCompile">
		<mkdir dir="./webServiceBridge/wsgen"/>
		<mkdir dir="./webServiceBridge/wsgen/src"/>
		<mkdir dir="./webServiceBridge/wsgen/bin"/>
		<wsgen
		sei="ca.deadman.gjtapi.raw.remote.webservices.GjtapiJaxWs"
		keep="false"
		destdir="./webServiceBridge/wsgen/bin"
		sourcedestdir="./webServiceBridge/wsgen/src"
		resourcedestdir="./webServiceBridge/wsgen"
		genwsdl="true" >
			<classpath>
				<pathelement path="${build}"/>
				<pathelement path="${build}-preServer"/>
			</classpath>
			<classpath refid="classpath"/>
		</wsgen>
	</target>

	<target name="jaxWsStub" depends="jaxWsGen">
		<mkdir dir="./webServiceBridge/wsimport"/>
		<wsimport
			wsdl="./webServiceBridge/wsgen/GjtapiJaxWsService.wsdl"
			destdir="./webServiceBridge/wsimport" />
	</target>
	
	<!-- Package up the JaxWS server war -->
	<target name="JaxWsServer" depends="jaxWsGen, Staging">
	    <war warfile="${staging}/gjtapi-jaxws-${version}.war"
	         webxml="./webServiceBridge/jaxws-web.xml">
	        <webinf dir="./webServiceBridge" includes="sun-jaxws.xml"/>
	        <webinf dir="./webServiceBridge/wsgen" includes="*.wsdl"/>
		<lib dir="redistrib">
			<include name="jtapi-1.3.1.jar"/>
			<include name="jtapi-1.3.1-mediaImpl.jar"/>
		</lib>
		<lib dir="${staging}">
			<include name="gjtapi-${version}.jar"/>
			<include name="gjtapi-remote-${version}.jar"/>
		</lib>
	        <classes dir="./webServiceBridge/wsgen/bin" includes="**/*.class" defaultexcludes="no"/>
	        <classes dir="${build}-preServer" includes="**/*.class" defaultexcludes="no"/>
	        <classes dir="./webServiceBridge/src" includes="**/server.props" defaultexcludes="yes"/>
	    </war>
	</target>
	
	<!-- create a JaxWs client -->
	<target name="JaxWsClient" depends="jaxWsStub" description="compile the Jax-WS client webProvider">
		<mkdir dir="${build}-wsclient"/>
		<javac srcdir="./webServiceBridge/wsClient"
		   destdir="${build}-wsclient"
		   debug="${compile.debug}" >
			<classpath>
				<path refid="classpath"/>
				<pathelement location="./webServiceBridge/wsimport"/>
				<pathelement location="${build}"/>
				<pathelement location="./webServiceBridge/build/classes/server"/>	<!-- MovableEventIds -->
			</classpath>
		</javac>
	</target>

	<!-- package up JAX-WS client as jar -->
	<target name="JaxWsClientStaging" description="Build the client jar file" depends="JaxWsClient">
		<copy file="./webServiceBridge/build/classes/server/ca/deadman/gjtapi/raw/remote/MovableEventIds.class" todir="${build}-wsclient/ca/deadman/gjtapi/raw/remote"/>
		<jar destfile="${staging}/gjtapi-jaxws-client-${version}.jar"
			basedir="${build}-wsclient" >
			<fileset dir="./webServiceBridge/wsimport" includes="**"/>
		</jar>
	</target>

	<!-- both client and server in Dist -->
	<target name="JaxWsDist" depends="JaxWsServer,JaxWsClientStaging">
		<!-- Package up the remote jar file, property files, readme and licence into the gjtapi-njiax-${version}.zip file -->
		<zip zipfile="${dist}/gjtapi-jaxws-${version}.zip">
			<fileset dir="${staging}">
			    <include name="gjtapi-jaxws-${version}.war"/>
				<include name="gjtapi-jaxws-client-${version}.jar"/>
			    <include name="${licenceFile}"/>
				<include name="${releaseNotes}"/>
				<include name="JaxWsClient.gjtapi"/>
			</fileset>
		</zip>
	</target>
	

	<target name="allDists" depends="SourceDist, coreDist, remoteDist, modemDist, sipDist, tapi3Dist, asteriskDist, dialogicDist, xtapiDist, webServiceDist, JaxWsDist, JavasoundDist, MjSipDist, NjIaxDist"/>
  	
	<target name="SourceDist" depends="init">
		<!-- Put all the source files into one zip file -->
		<zip zipfile="${dist}/gjtapi-src-${version}.zip">
			<fileset dir="${src}">
				<exclude name="**/CVS"/>
			</fileset>
			<fileset dir="${xtapi-src}">
				<exclude name="**/CVS"/>
			</fileset>
		    <fileset dir="." >
			  <include name="webServiceBridge/src/**"/>
		      <include name="webServiceBridge/testClient/**"/>
		      <include name="webServiceBridge/wsClient/**"/>
		      <exclude name="**/CVS"/>
			</fileset>
		</zip>
	</target>
	
	<target name="cleanStaging" >
		<delete dir="${staging}"/>
	</target>

  <target name="clean"
        description="clean up" >
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
  	<delete dir="${staging}"/>
    <delete dir="${xtapi-build}"/>
    <delete dir="${dist}"/>
  	<delete dir="webServiceBridge/build"/>
  	<delete dir="webServiceBridge/wsgen"/>
  	<delete dir="webServiceBridge/wsimport"/>
  </target>
</project>
