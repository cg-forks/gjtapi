package net.sourceforge.gjtapi.raw.remote.corba;

/**
* com/uforce/jtapi/generic/raw/remote/corba/_CorbaProviderStub.java
* Generated by the IDL-to-Java compiler (portable), version "3.0"
* from CorbaProvider.idl
* Thursday, November 16, 2000 1:45:33 o'clock PM EST
*/

public class _CorbaProviderStub extends org.omg.CORBA.portable.ObjectImpl implements CorbaProvider {
  // Type-specific CORBA::Object operations
  private static String[] __ids = {
	"IDL:com/uforce/jtapi/generic/raw/remote/corba/CorbaProvider:1.0"};
  // Constructors
  // NOTE:  If the default constructor is used, the
  //        object is useless until _set_delegate (...)
  //        is called.
  public _CorbaProviderStub ()
  {
	super ();
  }      
  public _CorbaProviderStub (org.omg.CORBA.portable.Delegate delegate)
  {
	super ();
	_set_delegate (delegate);
  }      
  public String[] _ids ()
  {
	return (String[])__ids.clone ();
  }      
  public void addListener (net.sourceforge.gjtapi.raw.remote.corba.CorbaListener cl)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("addListener", false);
	   net.sourceforge.gjtapi.raw.remote.corba.CorbaListenerHelper.write (_out, cl);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   addListener (cl);
	} finally {
		_releaseReply (_in);
	}
  } // addListener        
  public boolean allocateMedia (String term, int type, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] parameters)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("allocateMedia", true);
	   _out.write_string (term);
	   _out.write_long (type);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, parameters);
	   _in = _invoke (_out);
	   boolean __result = _in.read_boolean ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return allocateMedia (term, type, parameters);
	} finally {
		_releaseReply (_in);
	}
  } // allocateMedia        
  public void answerCall (int callId, String address, String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.RawStateEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("answerCall", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   answerCall (callId, address, terminal);
	} finally {
		_releaseReply (_in);
	}
  } // answerCall        
  public boolean attachMedia (int call, String address, boolean onFlag)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("attachMedia", true);
	   _out.write_long (call);
	   _out.write_string (address);
	   _out.write_boolean (onFlag);
	   _in = _invoke (_out);
	   boolean __result = _in.read_boolean ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return attachMedia (call, address, onFlag);
	} finally {
		_releaseReply (_in);
	}
  } // attachMedia      
  public void beep (int call)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("beep", false);
	   _out.write_long (call);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   beep (call);
	} finally {
		_releaseReply (_in);
	}
  } // beep      
  public int createCall (int callId, String address, String terminal, String destination) throws net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.RawStateEx, net.sourceforge.gjtapi.raw.remote.corba.InvalidPartyEx, net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("createCall", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _out.write_string (destination);
	   _in = _invoke (_out);
	   int __result = _in.read_long ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidPartyEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidPartyExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return createCall (callId, address, terminal, destination);
	} finally {
		_releaseReply (_in);
	}
  } // createCall        
  public boolean freeMedia (String terminal, int type)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("freeMedia", true);
	   _out.write_string (terminal);
	   _out.write_long (type);
	   _in = _invoke (_out);
	   boolean __result = _in.read_boolean ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return freeMedia (terminal, type);
	} finally {
		_releaseReply (_in);
	}
  } // freeMedia      
  public String[] getAddresses () throws net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getAddresses", true);
	   _in = _invoke (_out);
	   String __result[] = net.sourceforge.gjtapi.raw.remote.corba.StringArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getAddresses ();
	} finally {
		_releaseReply (_in);
	}
  } // getAddresses        
  public String[] getAddressesForTerm (String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getAddressesForTerm", true);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   String __result[] = net.sourceforge.gjtapi.raw.remote.corba.StringArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getAddressesForTerm (terminal);
	} finally {
		_releaseReply (_in);
	}
  } // getAddressesForTerm        
  public int getAddressType (String name)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getAddressType", true);
	   _out.write_string (name);
	   _in = _invoke (_out);
	   int __result = _in.read_long();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getAddressType (name);
	} finally {
		_releaseReply (_in);
	}
  } // getAddressType        
  public net.sourceforge.gjtapi.raw.remote.corba.CallData getCall (int callId)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getCall", true);
	   _out.write_long (callId);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.CallData __result = net.sourceforge.gjtapi.raw.remote.corba.CallDataHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getCall (callId);
	} finally {
		_releaseReply (_in);
	}
  } // getCall        
  public net.sourceforge.gjtapi.raw.remote.corba.CallData[] getCallsOnAddress (String address)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getCallsOnAddress", true);
	   _out.write_string (address);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.CallData __result[] = net.sourceforge.gjtapi.raw.remote.corba.CallArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getCallsOnAddress (address);
	} finally {
		_releaseReply (_in);
	}
  } // getCallsOnAddress        
  public net.sourceforge.gjtapi.raw.remote.corba.CallData[] getCallsOnTerminal (String terminal)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getCallsOnTerminal", true);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.CallData __result[] = net.sourceforge.gjtapi.raw.remote.corba.CallArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getCallsOnTerminal (terminal);
	} finally {
		_releaseReply (_in);
	}
  } // getCallsOnTerminal        
  public net.sourceforge.gjtapi.raw.remote.corba.StringEntry[] getCapabilities ()
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getCapabilities", true);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.StringEntry __result[] = net.sourceforge.gjtapi.raw.remote.corba.StringDictionaryHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getCapabilities ();
	} finally {
		_releaseReply (_in);
	}
  } // getCapabilities        
  public String getDialledDigits (int id, String address)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getDialledDigits", true);
	   _out.write_long (id);
	   _out.write_string (address);
	   _in = _invoke (_out);
	   String __result = _in.read_string ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getDialledDigits (id, address);
	} finally {
		_releaseReply (_in);
	}
  } // getDialledDigits      
  public org.omg.CORBA.Any getPrivateData (int callId, String address, String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.NotSerializableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getPrivateData", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   org.omg.CORBA.Any __result = _in.read_any ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/NotSerializableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.NotSerializableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getPrivateData (callId, address, terminal);
	} finally {
		_releaseReply (_in);
	}
  } // getPrivateData        
  public net.sourceforge.gjtapi.raw.remote.corba.TermData[] getTerminals () throws net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getTerminals", true);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.TermData __result[] = net.sourceforge.gjtapi.raw.remote.corba.TermArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getTerminals ();
	} finally {
		_releaseReply (_in);
	}
  } // getTerminals        
  public net.sourceforge.gjtapi.raw.remote.corba.TermData[] getTerminalsForAddr (String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("getTerminalsForAddr", true);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.TermData __result[] = net.sourceforge.gjtapi.raw.remote.corba.TermArrayHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return getTerminalsForAddr (terminal);
	} finally {
		_releaseReply (_in);
	}
  } // getTerminalsForAddr        
  public void hold (int callId, String address, String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.RawStateEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("hold", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   hold (callId, address, terminal);
	} finally {
		_releaseReply (_in);
	}
  } // hold        
  public void initialize (net.sourceforge.gjtapi.raw.remote.corba.StringEntry[] props) throws net.sourceforge.gjtapi.raw.remote.corba.ProviderUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("initialize", true);
	   net.sourceforge.gjtapi.raw.remote.corba.StringDictionaryHelper.write (_out, props);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ProviderUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ProviderUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   initialize (props);
	} finally {
		_releaseReply (_in);
	}
  } // initialize        
  public boolean isMediaTerminal (String terminal)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("isMediaTerminal", true);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   boolean __result = _in.read_boolean ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return isMediaTerminal (terminal);
	} finally {
		_releaseReply (_in);
	}
  } // isMediaTerminal      
  public int join (int callId1, int callId2, String address, String terminal) throws net.sourceforge.gjtapi.raw.remote.corba.RawStateEx, net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("join", true);
	   _out.write_long (callId1);
	   _out.write_long (callId2);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	   int __result = _in.read_long ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return join (callId1, callId2, address, terminal);
	} finally {
		_releaseReply (_in);
	}
  } // join        
  public void play (String terminal, String[] streamIds, int offset, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] rtcs, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] optArgs) throws net.sourceforge.gjtapi.raw.remote.corba.MediaResourceEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("play", true);
	   _out.write_string (terminal);
	   net.sourceforge.gjtapi.raw.remote.corba.StringArrayHelper.write (_out, streamIds);
	   _out.write_long (offset);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, rtcs);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, optArgs);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MediaResourceEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MediaResourceExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   play (terminal, streamIds, offset, rtcs, optArgs);
	} finally {
		_releaseReply (_in);
	}
  } // play        
  private void readObject (java.io.ObjectInputStream s)
  {
	 try 
	 {
	   String str = s.readUTF ();
	   org.omg.CORBA.Object obj = org.omg.CORBA.ORB.init ().string_to_object (str);
	   org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
	   _set_delegate (delegate);
	 } catch (java.io.IOException e) {}
  }      
  public void record (String terminal, String streamId, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] rtcs, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] optArgs) throws net.sourceforge.gjtapi.raw.remote.corba.MediaResourceEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("record", true);
	   _out.write_string (terminal);
	   _out.write_string (streamId);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, rtcs);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, optArgs);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MediaResourceEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MediaResourceExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   record (terminal, streamId, rtcs, optArgs);
	} finally {
		_releaseReply (_in);
	}
  } // record        
  public void release (String address, int callId) throws net.sourceforge.gjtapi.raw.remote.corba.RawStateEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("release", true);
	   _out.write_string (address);
	   _out.write_long (callId);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   release (address, callId);
	} finally {
		_releaseReply (_in);
	}
  } // release        
  public void releaseCallId (int callId)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("releaseCallId", true);
	   _out.write_long (callId);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   releaseCallId (callId);
	} finally {
		_releaseReply (_in);
	}
  } // releaseCallId      
  public void removeListener (net.sourceforge.gjtapi.raw.remote.corba.CorbaListener cl)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("removeListener", false);
	   net.sourceforge.gjtapi.raw.remote.corba.CorbaListenerHelper.write (_out, cl);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   removeListener (cl);
	} finally {
		_releaseReply (_in);
	}
  } // removeListener        
  public void reportCallsOnAddress (String address, boolean flag) throws net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("reportCallsOnAddress", true);
	   _out.write_string (address);
	   _out.write_boolean (flag);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   reportCallsOnAddress (address, flag);
	} finally {
		_releaseReply (_in);
	}
  } // reportCallsOnAddress        
  public void reportCallsOnTerminal (String terminal, boolean flag) throws net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("reportCallsOnTerminal", true);
	   _out.write_string (terminal);
	   _out.write_boolean (flag);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   reportCallsOnTerminal (terminal, flag);
	} finally {
		_releaseReply (_in);
	}
  } // reportCallsOnTerminal        
  public int reserveCallId (String address) throws net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("reserveCallId", true);
	   _out.write_string (address);
	   _in = _invoke (_out);
	   int __result = _in.read_long ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/InvalidArgumentEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.InvalidArgumentExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return reserveCallId (address);
	} finally {
		_releaseReply (_in);
	}
  } // reserveCallId        
  public net.sourceforge.gjtapi.raw.remote.corba.DetectEvent retrieveSignals (String terminal, int num, int[] patterns, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] rtcs, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] optArgs) throws net.sourceforge.gjtapi.raw.remote.corba.MediaResourceEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("retrieveSignals", true);
	   _out.write_string (terminal);
	   _out.write_long (num);
	   net.sourceforge.gjtapi.raw.remote.corba.LongArrayHelper.write (_out, patterns);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, rtcs);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, optArgs);
	   _in = _invoke (_out);
	   net.sourceforge.gjtapi.raw.remote.corba.DetectEvent __result = net.sourceforge.gjtapi.raw.remote.corba.DetectEventHelper.read (_in);
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MediaResourceEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MediaResourceExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return retrieveSignals (terminal, num, patterns, rtcs, optArgs);
	} finally {
		_releaseReply (_in);
	}
  } // retrieveSignals        
  public org.omg.CORBA.Any sendPrivateData (int callId, String address, String terminal, org.omg.CORBA.Any data) throws net.sourceforge.gjtapi.raw.remote.corba.NotSerializableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("sendPrivateData", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _out.write_any (data);
	   _in = _invoke (_out);
	   org.omg.CORBA.Any __result = _in.read_any ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/NotSerializableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.NotSerializableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return sendPrivateData (callId, address, terminal, data);
	} finally {
		_releaseReply (_in);
	}
  } // sendPrivateData        
  public void sendSignals (String terminal, int[] syms, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] rtcs, net.sourceforge.gjtapi.raw.remote.corba.LongEntry[] optArgs) throws net.sourceforge.gjtapi.raw.remote.corba.MediaResourceEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("sendSignals", true);
	   _out.write_string (terminal);
	   net.sourceforge.gjtapi.raw.remote.corba.LongArrayHelper.write (_out, syms);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, rtcs);
	   net.sourceforge.gjtapi.raw.remote.corba.LongDictionaryHelper.write (_out, optArgs);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MediaResourceEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MediaResourceExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   sendSignals (terminal, syms, rtcs, optArgs);
	} finally {
		_releaseReply (_in);
	}
  } // sendSignals        
  public void setLoadControl (String startAddr, String endAddr, double duration, double admissionRate, double interval, int[] treatment) throws net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("setLoadControl", true);
	   _out.write_string (startAddr);
	   _out.write_string (endAddr);
	   _out.write_double (duration);
	   _out.write_double (admissionRate);
	   _out.write_double (interval);
	   net.sourceforge.gjtapi.raw.remote.corba.LongArrayHelper.write (_out, treatment);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   setLoadControl (startAddr, endAddr, duration, admissionRate, interval, treatment);
	} finally {
		_releaseReply (_in);
	}
  } // setLoadControl        
  public void setPrivateData (int callId, String address, String terminal, org.omg.CORBA.Any data)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("setPrivateData", false);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (terminal);
	   _out.write_any (data);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   setPrivateData (callId, address, terminal, data);
	} finally {
		_releaseReply (_in);
	}
  } // setPrivateData      
  public void shutdown ()
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("shutdown", true);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   shutdown ();
	} finally {
		_releaseReply (_in);
	}
  } // shutdown      
  public void stop (String terminal)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("stop", true);
	   _out.write_string (terminal);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   stop (terminal);
	} finally {
		_releaseReply (_in);
	}
  } // stop      
  public boolean stopReportingCall (int callId)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("stopReportingCall", true);
	   _out.write_long (callId);
	   _in = _invoke (_out);
	   boolean __result = _in.read_boolean ();
	   return __result;
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   return stopReportingCall (callId);
	} finally {
		_releaseReply (_in);
	}
  } // stopReportingCall      
  public void triggerRTC (String terminal, int action)
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("triggerRTC", true);
	   _out.write_string (terminal);
	   _out.write_long (action);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   triggerRTC (terminal, action);
	} finally {
		_releaseReply (_in);
	}
  } // triggerRTC      
  public void unHold (int callId, String address, String term) throws net.sourceforge.gjtapi.raw.remote.corba.RawStateEx, net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedEx, net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationEx, net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableEx
  {
	org.omg.CORBA.portable.InputStream _in = null;
	try {
	   org.omg.CORBA.portable.OutputStream _out = _request ("unHold", true);
	   _out.write_long (callId);
	   _out.write_string (address);
	   _out.write_string (term);
	   _in = _invoke (_out);
	} catch (org.omg.CORBA.portable.ApplicationException _ex) {
	   _in = _ex.getInputStream ();
	   String _id = _ex.getId ();
	   if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/RawStateEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.RawStateExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/MethodNotSupportedEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.MethodNotSupportedExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/PrivilegeViolationEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.PrivilegeViolationExHelper.read (_in);
	   else if (_id.equals ("IDL:com/uforce/jtapi/generic/raw/remote/corba/ResourceUnavailableEx:1.0"))
		  throw net.sourceforge.gjtapi.raw.remote.corba.ResourceUnavailableExHelper.read (_in);
	   else
			throw new org.omg.CORBA.MARSHAL (_id);
	} catch (org.omg.CORBA.portable.RemarshalException _rm) {
	   unHold (callId, address, term);
	} finally {
		_releaseReply (_in);
	}
  } // unHold        
  private void writeObject (java.io.ObjectOutputStream s)
  {
	 try 
	 {
	   String str = org.omg.CORBA.ORB.init ().object_to_string (this);
	   s.writeUTF (str);
	 } catch (java.io.IOException e) {}
  }      
} // class _CorbaProviderStub
